options
{
    STATIC=false;
    LOOKAHEAD=1;
    JDK_VERSION="1.5";
    DEBUG_PARSER=true;
    DEBUG_LOOKAHEAD=true;
    DEBUG_TOKEN_MANAGER=true;
}
PARSER_BEGIN(Calculator)
package org.paccman.calc.parser;

import java.math.BigDecimal;

public class Calculator
{
    public static void displayValue(BigDecimal d, String op) {
        System.out.println("==============================================================>>>> DISPLAY[" + op +"]: " + d.toString());
    }
}
PARSER_END(Calculator)

TOKEN:
{
    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < DIGIT: ["0"-"9"] >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < TIMES: "*" >
|   < DIVIDE: "/" >
|   < OPEN_PAR: "(" >
|   < CLOSE_PAR: ")" >
}

void parse():
{
    BigDecimal a;
}
{
    a=Expression() <EOF>      { System.out.println(a.toString()); }
  | <EOF>
}

BigDecimal Expression() throws NumberFormatException :
{
      BigDecimal i ;
      BigDecimal value ;
}
{
      value = Term()
      (
           <PLUS>
           i = Term()
           { value = value.add(i); displayValue(value, "+"); }
      |
           <MINUS>
           i = Term()
           { value = value.add(i) ; displayValue(value, "-"); }
      )*
      { return value ; }
}

BigDecimal Term() throws NumberFormatException :
{
  BigDecimal i ;
  BigDecimal value ;
}
{
  value = Primary()
  (
       <TIMES>
       i = Primary()
       { value = value.multiply(i) ; displayValue(value, "*");}
  |
       <DIVIDE>
       i = Primary()
       { value = value.divide(i) ; displayValue(value, "/");}
  )*
  { return value ; }
}

BigDecimal Primary() throws NumberFormatException :
{
      Token t ;
      BigDecimal d ;
}
{
      t=<NUMBER>
      { return new BigDecimal( t.image ) ; }
|
      <OPEN_PAR> d=Expression() <CLOSE_PAR>
      { displayValue(d, ")"); return d ; }
}
