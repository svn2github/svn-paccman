/*
 * AmountCellRenderer.java
 *
 * Created on 6 d√©cembre 2005, 13:08
 */

package org.paccman.ui.common.table.renderer;

import java.awt.Color;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JLabel;

/**
 *
 * @author  joao
 */
public class AmountCellRenderer extends TableCellRenderer {
    
    static NumberFormat formatter = NumberFormat.getCurrencyInstance();
    static {
        DecimalFormat df = (DecimalFormat)formatter;
        String pattern = df.toPattern();
        pattern = pattern.replaceAll("\u00A4", "").trim() + " ";
        df.applyPattern(pattern);
    }
    
    public void setValue(Object value) {
        if (value == null) {
            setText("");
        } else {
            assert value instanceof BigDecimal: "Bad_value_type_for_column._BigDecimal_expected.";
            BigDecimal amount = (BigDecimal)value;
            if (!showSign && (amount.signum() < 0)) {
                amount = amount.negate();
            }
            setText(formatter.format(amount));
        }
    }

    /** Creates new form BeanForm */
    public AmountCellRenderer() {
        initComponents();
    }

   public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

        JLabel retValue;
        BigDecimal amount = (BigDecimal)value;
        
        retValue = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value == null) {
            return retValue;
        }
        if ((amount.signum() < 0) && (colorWhenNegative != null)) {
            retValue.setForeground(colorWhenNegative);
        } else {
            retValue.setForeground(Color.BLACK);
        }

        return retValue;
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property showSign.
     */
    private boolean showSign;

    /**
     * Getter for property showSign.
     * @return Value of property showSign.
     */
    public boolean isShowSign() {
        return this.showSign;
    }

    /**
     * Setter for property showSign.
     * @param showSign New value of property showSign.
     */
    public void setShowSign(boolean showSign) {
        this.showSign = showSign;
    }

    /**
     * Holds value of property colorWhenNegative.
     */
    private Color colorWhenNegative;

    /**
     * Getter for property colorWhenNegative.
     * @return Value of property colorWhenNegative.
     */
    public Color getColorWhenNegative() {
        return this.colorWhenNegative;
    }

    /**
     * Setter for property colorWhenNegative.
     * @param colorWhenNegative New value of property colorWhenNegative.
     */
    public void setColorWhenNegative(Color colorWhenNegative) {
        this.colorWhenNegative = colorWhenNegative;
    }
    
}
