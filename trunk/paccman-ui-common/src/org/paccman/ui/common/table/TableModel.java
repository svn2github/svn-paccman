/*
 * TableModel.java
 *
 * Created on 6 d√©cembre 2005, 13:59
 */

package org.paccman.ui.common.table;

import java.util.Arrays;
import javax.swing.table.AbstractTableModel;
import org.paccman.ui.common.table.renderer.TableCellRenderer;

/**
 *
 * @author  jfer
 */
public abstract class TableModel extends AbstractTableModel {
    
    public static class ColumnDescriptor {
        String            name     ; // column header name
        int               dataIndex; // data identifier
        TableCellRenderer renderer ; // table renderer used for the column
        String            prefId   ; // preference identifier
        public ColumnDescriptor(String name, int dataIndex, TableCellRenderer renderer, String prefId) {
            this.name      = name     ;
            this.dataIndex = dataIndex;
            this.renderer  = renderer ;
            this.prefId    = prefId   ;
        }
        public String getName() {
            return name;
        }
        public int getDataIndex() {
            return dataIndex;
        }
        public TableCellRenderer getRenderer() {
            return renderer;
        }
        public String getPrefId() {
            return prefId;
        }
    };
    
    /** Creates new form BeanForm */
    public TableModel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        
    }
    // </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public int getColumnCount() {
        return columnDescriptors != null ? columnDescriptors.length : 0;
    }

    public String getColumnName(int columnIndex) {
        return columnDescriptors[columnIndex].getName();
    }

    /**
     * Holds value of property columnDescriptors.
     */
    protected org.paccman.ui.common.table.TableModel.ColumnDescriptor[] columnDescriptors;

    /**
     * Getter for property columnDescriptors.
     * @return Value of property columnDescriptors.
     */
    public org.paccman.ui.common.table.TableModel.ColumnDescriptor[] getColumnDescriptors() {
        return this.columnDescriptors;
    }

    /**
     * Setter for property columnDescriptors.
     * @param columnDescriptors New value of property columnDescriptors.
     */
    public void setColumnDescriptors(org.paccman.ui.common.table.TableModel.ColumnDescriptor[] columnDescriptors) {
        this.columnDescriptors = columnDescriptors;
    }

    public ColumnDescriptor getColumnDescriptor(int dataIndex) {
        if (columnDescriptors == null) {
            return null;
        } else {
            for (ColumnDescriptor cd: columnDescriptors) {
                if (cd.getDataIndex() == dataIndex) {
                    return cd;
                }
            }
        }
        return null;
    }

    public int getColumnIndex(int dataIndex) {
        if (columnDescriptors != null) {
            for (int i = 0 ; i < columnDescriptors.length ;i++ ) {
                if (columnDescriptors[i].getDataIndex() == dataIndex) {
                    return i;
                }
            }
        }
        return -1;
    }
    
    public abstract Object getDataValue(int row, int column);

    public Object getValueAt(int rowIndex, int columnIndex) {
        assert columnDescriptors != null: "Make sure that the columDescriptors has been initialized";
        
        return getDataValue(rowIndex, columnDescriptors[columnIndex].getDataIndex());
    }

}
