/*
 
    Copyright (C)    2005 Joao F. (joaof@sourceforge.net)
                     http://paccman.sourceforge.net 

    This program is free software; you can redistribute it and/or modify      
    it under the terms of the GNU General Public License as published by      
    the Free Software Foundation; either version 2 of the License, or         
    (at your option) any later version.                                       

    This program is distributed in the hope that it will be useful,           
    but WITHOUT ANY WARRANTY; without even the implied warranty of            
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             
    GNU General Public License for more details.                              

    You should have received a copy of the GNU General Public License         
    along with this program; if not, write to the Free Software               
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 
*/

package org.paccman.ui.welcome.accounts;

import java.awt.Color;
import javax.swing.event.MouseInputAdapter;
import javax.swing.table.TableColumn;
import org.paccman.controller.AccountController;
import org.paccman.controller.ControllerManager;
import org.paccman.ui.main.Main;
import static org.paccman.ui.main.ContextMain.*;

/**
 *
 * @author  joao
 */
public class AccountTable extends javax.swing.JTable {
    
    //:TODO:START:parameterize this
    private static final Color rolloverColor  = new Color(204,255,255);
    private static final Color normalColor    = Color.WHITE;
    private static final Color headerColorBkg = new Color(0,0,255);
    private static final Color totalRowColor  = Color.LIGHT_GRAY;
    //:TODO:END:
    
    public static final Color getRolloverRowColor() {
        return rolloverColor;
    }
    
    public static final Color getNormalRowColor() {
        return normalColor;
    }
    
    public static final Color getHeaderColorBkg() {
        return headerColorBkg;
    }

    public Color getTotalRowColor() {
        return totalRowColor;
    }
    
    public static final int ACCOUNT_NAME_COL      = 0;
    public static final int CURRENT_BALANCE_COL   = 1;
    public static final int AVAILABLE_BALANCE_COL = 2;
    public static String columns[] = { "Account", "Current balance", "Available balance"};
    
    AccountTableModel model;
    
    public AccountTableModel getModel() {
        return model;
    }
    
    /** Creates new form BeanForm */
    public AccountTable() {
        initComponents();
        setModel(model = new AccountTableModel());
        
        RollOverListener rl = new RollOverListener();
        addMouseMotionListener(rl);
        addMouseListener(rl);
        
        TableColumn accountNameColumn = getColumnModel().getColumn(ACCOUNT_NAME_COL);
        accountNameColumn.setHeaderRenderer(new AccountNameHeaderRenderer());
        accountNameColumn.setCellRenderer(new AccountNameCellRenderer());
        
        TableColumn balanceColumn = getColumnModel().getColumn(CURRENT_BALANCE_COL);
        balanceColumn.setHeaderRenderer(new BalanceHeaderRenderer("Current balance"));
        balanceColumn.setCellRenderer(new BalanceCellRenderer());
        
        TableColumn availBalanceColumn = getColumnModel().getColumn(AVAILABLE_BALANCE_COL);
        availBalanceColumn.setHeaderRenderer(new BalanceHeaderRenderer("Available balance"));
        availBalanceColumn.setCellRenderer(new BalanceCellRenderer());
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setEnabled(false);
    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    private class RollOverListener extends MouseInputAdapter {
        
        public void mouseMoved(java.awt.event.MouseEvent e) {
            int row = rowAtPoint(e.getPoint());
            if (row != rollOverRow) {
                rollOverRow = row;
                repaint();
            }
        }
        
        public void mouseExited(java.awt.event.MouseEvent e) {
            rollOverRow = -1;
            repaint();
        }
        
        public void mouseClicked(java.awt.event.MouseEvent e) {
            int row = rowAtPoint(e.getPoint());
            if ((row != -1) && ! getModel().isTotalRow(row)) {
                AccountController selectedAccount = (AccountController)ControllerManager.getController(getDocumentController().getDocument().getAccount(row));
                Main.getMain().gotoAccountTransactionTab(selectedAccount); 
            }
        }
        
    }
    /**
     * Holds value of property rolloverRow.
     */
    private int rollOverRow = -1;
    
    /**
     * Getter for property rolloverRow.
     * @return Value of property rolloverRow.
     */
    public int getRolloverRow() {
        return this.rollOverRow;
    }
    
    /**
     * Setter for property rolloverRow.
     * @param rolloverRow New value of property rolloverRow.
     */
    public void setRolloverRow(int rollOverRow) {
        this.rollOverRow = rollOverRow;
    }

    public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer renderer, int row, int column) {
        java.awt.Component retValue;
        
        //:TODO: rollover + total row
        retValue = super.prepareRenderer(renderer, row, column);
        return retValue;
    }
    
}
