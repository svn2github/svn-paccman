/*
 
    Copyright (C)    2005 Joao F. (joaof@sourceforge.net)
                     http://paccman.sourceforge.net
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 */

package org.paccman.ui.schedules;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import org.paccman.controller.AccountController;
import org.paccman.controller.ControllerManager;
import org.paccman.controller.ScheduledTransactionController;
import org.paccman.ui.form.BadInputException;
import org.paccman.ui.selector.ControllerSelectionListener;

/**
 *
 * @author  joao
 */
public class ScheduleFormTab extends javax.swing.JPanel implements ControllerSelectionListener, ListSelectionListener {
    
    /** Creates new form ScheduleFormTab */
    public ScheduleFormTab() {
        initComponents();
        accountSelectorPanel.addListener(this);
        scheduledTransactionTable.getSelectionModel().addListSelectionListener(this);
    }
    
    public void registerToDocumentCtrl() {
        accountSelectorPanel.registerToDocumentCtrl();
        scheduleFormPanel.registerToDocumentCtrl();
    }
    
    public void controllerSelected(org.paccman.controller.Controller accountCtrl) {
        if (selectedAccount != accountCtrl) {
            selectedAccount = (AccountController)accountCtrl;
            scheduledTransactionTable.getScheduledTableModel().setAccountController(selectedAccount);
            newBtn.setEnabled(true);
        }
    }
    
    public boolean selectionEnabled() {
        return true; //:TODO:
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        newBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scheduleFormPanel = new org.paccman.ui.schedules.ScheduleForm();
        validateCancelPanel = new javax.swing.JPanel();
        validateBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        scheduledTransactionTable = new org.paccman.ui.schedules.table.ScheduledTransactionTable();
        accountSelectorPanel = new org.paccman.ui.accountselector.AccountSelectorPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        newBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/paccman/ui/resources/images/new_transaction.png")));
        newBtn.setToolTipText("Add new transaction");
        newBtn.setEnabled(false);
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        jToolBar1.add(newBtn);

        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/paccman/ui/resources/images/edit_transaction.png")));
        editBtn.setToolTipText("Edit current selected transaction");
        editBtn.setEnabled(false);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        jToolBar1.add(editBtn);

        removeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/paccman/ui/resources/images/remove_transaction.png")));
        removeBtn.setToolTipText("Delete current selected transaction");
        removeBtn.setEnabled(false);
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        jToolBar1.add(removeBtn);

        jPanel3.add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.add(scheduleFormPanel, java.awt.BorderLayout.NORTH);

        validateCancelPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        validateBtn.setText("Validate");
        validateBtn.setEnabled(false);
        validateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateBtnActionPerformed(evt);
            }
        });

        validateCancelPanel.add(validateBtn);

        cancelBtn.setText("Cancel");
        cancelBtn.setEnabled(false);
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        validateCancelPanel.add(cancelBtn);

        jPanel1.add(validateCancelPanel, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane.setViewportView(scheduledTransactionTable);

        jPanel3.add(jScrollPane, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        jSplitPane1.setLeftComponent(accountSelectorPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    private void validateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateBtnActionPerformed
        
        ScheduledTransactionController validatedSchedTransaction = null;
        validatedSchedTransaction = (ScheduledTransactionController) scheduleFormPanel.onValidate();
        if ( validatedSchedTransaction != null) {

            setEditMode(false);

            if (scheduleFormPanel.isEditingNew()) {

                // New transaction added
                int newTransactionIx = selectedAccount.getAccount().addScheduledTransaction(validatedSchedTransaction.getScheduledTransaction());

                selectedAccount.notifyChange();
                scheduledTransactionTable.getSelectionModel().setSelectionInterval(newTransactionIx, newTransactionIx);

            } else {
//
//                // Transaction updated
//                assert selectedTransaction.getTransactionBase().getReconciliationState() !=
//                        TransactionBase.ReconciliationState.RECONCILED;
//
//                if (validatedTransaction != selectedTransaction) {
//
//                    // Transaction changed of type (split -> transfer, transfer -> split....)
//
//                    //  Removed the old one
//                    selectedAccount.getAccount().removeTransaction(selectedTransactionIndex);
//
//                    // Add the new one
//                    int newTransactionIx = selectedAccount.getAccount().addTransaction(validatedTransaction.getTransactionBase(), true);
//
//                    if (validatedTransaction instanceof TransferController) {
//                        addOtherTransfer((TransferController)validatedTransaction);
//                    }
//
//                    TransactionBase oldTransactionBase = selectedTransaction.getTransactionBase();
//                    TransactionBase newTransactionBase = validatedTransaction.getTransactionBase();
//
//                    newTransactionIx = transactionTable.getModel().transactionIndexToTransactionRow(newTransactionIx);
//                    selectedAccount.notifyChange();
//                    transactionTable.getSelectionModel().setSelectionInterval(newTransactionIx, newTransactionIx);
//
//                } else {
//
//                    int transactionRow = transactionTable.getSelectedRow();
//                    int transactionIndex = transactionTable.getModel().transactionRowToTransactionIndex(transactionRow);
//                    int updatedTransactionIx = selectedAccount.getAccount().updateTransaction(transactionIndex);
//                    int updatedTransactionRow = transactionTable.getModel().transactionRowToTransactionIndex(updatedTransactionIx);
//                    selectedAccount.notifyChange();
//                    selectedTransaction.notifyChange();
//                    transactionTable.getSelectionModel().setSelectionInterval(updatedTransactionRow, updatedTransactionRow);
//
//                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to validate", "Validation failed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_validateBtnActionPerformed
    
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        setEditMode(false);
        scheduleFormPanel.onCancel();
    }//GEN-LAST:event_cancelBtnActionPerformed
    
    public void unselectScheduledTransaction() {
        scheduleFormPanel.onUnselect();
    }
    
    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        assert selectedScheduledTransaction != null;
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this scheduled transaction ?",
                "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            unselectScheduledTransaction();
            selectedAccount.getAccount().removeScheduledTransaction(selectedScheduledTransactionIndex);
            selectedAccount.notifyChange();
            org.paccman.ui.main.Main.setDocumentChanged(true);
        }
    }//GEN-LAST:event_removeBtnActionPerformed
    
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        setEditMode(true);
        scheduleFormPanel.onEdit();
    }//GEN-LAST:event_editBtnActionPerformed
    
    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        setEditMode(true);
        scheduleFormPanel.onNew();
    }//GEN-LAST:event_newBtnActionPerformed
    
    AccountController              selectedAccount                  ;
    ScheduledTransactionController selectedScheduledTransaction     ;
    int                            selectedScheduledTransactionIndex;
    
    boolean editing;
    
    public void setEditMode(boolean editing) {
        this.editing = editing;
        
        scheduleFormPanel.setEditMode(editing);
        newBtn.setEnabled(!editing && (selectedAccount != null));
        validateBtn.setEnabled(editing);
        cancelBtn.setEnabled(editing);
        scheduledTransactionTable.setEnabled(!editing);
    }
    
    public void valueChanged(javax.swing.event.ListSelectionEvent e) {
        //Ignore extra messages.
        if (e.getValueIsAdjusting()) return;
        
        ListSelectionModel lsm = (ListSelectionModel)e.getSource();
        
        boolean selectionEmpty = lsm.isSelectionEmpty();
        
        if (selectionEmpty) {
//:TODO:            unselectTransaction();
        } else {
            selectedScheduledTransactionIndex = lsm.getMinSelectionIndex();
            selectedScheduledTransaction = (ScheduledTransactionController)ControllerManager.getController(selectedAccount.getAccount().getScheduledTransaction(selectedScheduledTransactionIndex));
            scheduleFormPanel.onSelect(selectedScheduledTransaction);
        }
        
        editBtn.setEnabled(! selectionEmpty );
        removeBtn.setEnabled(! selectionEmpty );
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.paccman.ui.accountselector.AccountSelectorPanel accountSelectorPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton removeBtn;
    private org.paccman.ui.schedules.ScheduleForm scheduleFormPanel;
    private org.paccman.ui.schedules.table.ScheduledTransactionTable scheduledTransactionTable;
    private javax.swing.JButton validateBtn;
    private javax.swing.JPanel validateCancelPanel;
    // End of variables declaration//GEN-END:variables
    
}
