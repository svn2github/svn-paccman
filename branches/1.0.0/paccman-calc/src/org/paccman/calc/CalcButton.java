/*
 
    Copyright (C)    2007 Joao F. (joaof@sourceforge.net)
                     http://paccman.sourceforge.net 

    This program is free software; you can redistribute it and/or modify      
    it under the terms of the GNU General Public License as published by      
    the Free Software Foundation; either version 2 of the License, or         
    (at your option) any later version.                                       

    This program is distributed in the hope that it will be useful,           
    but WITHOUT ANY WARRANTY; without even the implied warranty of            
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             
    GNU General Public License for more details.                              

    You should have received a copy of the GNU General Public License         
    along with this program; if not, write to the Free Software               
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 
*/

package org.paccman.calc;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 *
 * @author  joao
 */
public class CalcButton extends javax.swing.JButton {

    /** Creates new form BeanForm */
    public CalcButton() {
        initComponents();
    }

    /**
     * 
     * @param token
     * @param keyCodes
     * @param keyChars
     */
    public CalcButton(char token, int[] keyCodes, char[] keyChars) {
        this.token = token;
        this.keyChars = keyChars;
        this.keyCodes = keyCodes;
        initComponents();
    }

    /**
     * 
     * @param rootPane 
     * 
     */
    public void registerKey(JRootPane rootPane) {
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);

        // Register KeyCodes
        for (int keyCode : keyCodes) {
            StringBuffer sb = new StringBuffer(CalcButton.class.getName());
            sb.append("_KEYCODE_");
            sb.append(keyCode);
            String strKey = sb.toString();
            inputMap.put(KeyStroke.getKeyStroke(keyCode, 0), strKey);
            rootPane.getActionMap().put(strKey, new AbstractAction(strKey) {

                        @Override
                public void actionPerformed(ActionEvent actionEvent) {
                            doClick();
                        }
                    });
        }

        // Register KeyChars
        for (char keyChar : keyChars) {
            StringBuffer sb = new StringBuffer(CalcButton.class.getName());
            sb.append("_KEYCODE_");
            sb.append(keyChar);
            String strKey = sb.toString();
            inputMap.put(KeyStroke.getKeyStroke(keyChar), strKey);
            rootPane.getActionMap().put(strKey, new AbstractAction(strKey) {

                        @Override
                public void actionPerformed(ActionEvent actionEvent) {
                            doClick();
                        }
                    });
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setFont(new java.awt.Font("Dialog", 1, 10));
        setFocusable(false);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private int[] keyCodes;
    private char[] keyChars;

    private char token;

    /**
     * 
     * @return
     */
    public char getToken() {
        return token;
    }
}
